#+title: DustVoice's WSL from scratch
#+author: DustVoice
#+email: info@dustvoice.de

This document is an attempt at providing a guide for my [[https://learn.microsoft.com/en-us/windows/wsl/install][WSL 2]] setup based on [[https://archlinux.org][Arch Linux]], or rather [[https://github.com/yuk7/ArchWSL][ArchWSL]].

It is mainly intended as a set of personal mental crutches, so the following disclaimer applies

#+begin_quote
[!CAUTION]
Your mileage may vary!

Not for the faint of heart!

Be wary of utter steaming hot garbage!

Proceed with caution and at your own risk!
#+end_quote

* Prerequisites

Before we can get started, we need to do a bit of configuration outside and inside the WSL environment to enable the rest of the guide

** Enable the Windows Feature

#+begin_quote
[!IMPORTANT]
It seems as if you don't longer need to manually enable the Windows Feature manually/yourself, as [[https://devblogs.microsoft.com/commandline/install-wsl-with-a-single-command-now-available-in-windows-10-version-2004-and-higher/?commentid=5587#comment-5587][this comment]] suggests.

I'll still leave the following info intact, because we all know what beautiful, reliable and stable pieces of software /Microsoft Windows/ and the /Microsoft Store/ are _{sarcasm off} ...
#+end_quote

You might want to enable the =Windows Subsystem for Linux= Windows feature.
You can either try opening your /Windows Search/ and searching for =Turn Windows features on or off=, or you can dig your way through the /Control Panel/.

#+begin_quote
[!TIP]
For [[https://github.com/microsoft/wslg][WSLg]] to work properly, you need to make sure you're running the Windows 11, or the minimum required version of Windows 10 /(Version 2004 or higher / Build 19041 or higher)/.
#+end_quote

** Installing / Updating WSL

#+begin_quote
[!NOTE]
Microsoft recommends installing the Distro from the Microsoft store, but also specifies the commands below.

In my experience, depending on your installation, or whether your Microsoft Store has shot itself in the foot yet or not, the installation is a little incoherent.

When in doubt, use the [[https://learn.microsoft.com/en-us/windows/wsl/install][official Microsoft installation documentation]].
#+end_quote

To install WSL from a =cmd= or =PowerShell= /with elevated privileges/ run ~wsl --install -d Ubuntu~, or if you've already installed WSL in the past, /also from an elevated prompt/, run ~wsl --update~.

*** Just Works^{TM}?

#+begin_quote
[!IMPORTANT]
This should only be neccessary if your Windows is locked down, the Microsoft Store is disabled, or similar.
#+end_quote

As it turns out, if you're in a pretty restricting corporate setting, the Windows environment is somewhat ... botched.
The only way I was able to install WSL successfully is by using the manual installation method.

This includes
1. Downloading the [[https://github.com/microsoft/WSL/releases][latest WSL release]] (the =.msixbundle=)
2. Installing it by running
#+begin_src powershell
Add-AppxPackage Microsoft.WSL_<version>_<arch>.msixbundle
#+end_src
3. Proceeding with the [[*Installing ArchWSL][Installing ArchWSL]] step.

#+begin_quote
[!NOTE]
If ~wsl --update~ also doesn't work, in addition to ~wsl --install [...]~, you might need to repeat the aforementioned process for updating WSL.
#+end_quote

** Installing ArchWSL

#+begin_quote
[!NOTE]
When in doubt, use the [[https://wsldl-pg.github.io/ArchW-docs/][ArchWSL documentation]].
#+end_quote

For me, the simplest procedure was to

1. Download the latest =Arch.zip= file from the [[https://github.com/yuk7/ArchWSL/releases/latest][release page]]

2. Extract it to a folder where your user has unrestricted read and write permissions, so ideally stay away from =Program Files=, etc.

3. Run the included =Arch.exe=

4. Change the root password

   #+begin_src sh
passwd
   #+end_src

5. Add the =wheel= group to the allowed =sudo= users

   #+begin_src sh
echo "%wheel ALL=(ALL) ALL" > /etc/sudoers.d/wheel
   #+end_src

6. Add a new user and add it to the =wheel= group

   #+begin_src sh
useradd -m -G wheel -s /bin/bash <username>
   #+end_src

7. Change the new user's password

   #+begin_src sh
passwd <username>
   #+end_src

8. Exit the WSL environment

   #+begin_src sh
exit
   #+end_src

9. Set the new user as the default one

   #+begin_src powershell
Arch.exe config --default-user <username>
   #+end_src

10. Rebooting or restarting =LxssManager= with

    #+begin_src powershell
net stop lxssmanager
#+end_src

    and

    #+begin_src powershell
net start lxssmanager
#+end_src

11. After that reenter WSL with
    #+begin_src powershell
Arch.exe
#+end_src

12. Setup the =pacman= keyring

    #+begin_src sh
sudo pacman-key --init
sudo pacman-key --populate
sudo pacman -Sy archlinux-keyring
    #+end_src

13. Update the base system

    #+begin_src sh
sudo pacman -Su
    #+end_src

#+begin_quote
[!TIP]
You can update your mirrorlist with your nearest mirrors.

1. It is best practice to backup your original mirrorlist.
#+begin_src sh
sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.old
#+end_src
2. Generate a mirrorlist with the 5 best mirrors and save it to =/etc/pacman.d/mirrorlist=
#+begin_src sh
curl -s "https://archlinux.org/mirrorlist/?country=DE&protocol=http&protocol=https&ip_version=4&use_mirror_status=on"  | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - | sudo tee /etc/pacman.d/mirrorlist
#+end_src
#+end_quote

*** Just Works^{TM} v2

#+begin_quote
[!IMPORTANT]
This should only be neccessary if you're behind a (corporate) http proxy
#+end_quote

As I'm sitting behind a corporate http proxy, I had no access to the internet.
This can be confirmed by running
#+name: curl_test
#+begin_src sh
curl https://archlinux.org
#+end_src

To make WSL proxy-aware, I needed to

1. Populate my =~/.bashrc= with

   #+begin_src bash
export http_proxy=http://<hostname>:<port>
export https_proxy=$http_proxy
export ftp_proxy=$http_proxy
#+end_src

2. Source it with

   #+begin_src sh
source ~/.bashrc
   #+end_src

3. Allow =sudo= to pass these environment variables through by populating =/etc/sudoers.d/proxy= with

   #+begin_src txt
Defaults env_keep += "http_proxy https_proxy ftp_proxy"
   #+end_src

Rerunning the [[curl_test][=curl= command]] should now produce a response and =pacman= get updated and upgraded

#+begin_src sh
sudo pacman -Syyuu
#+end_src
